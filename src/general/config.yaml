# Model Configuration
default_model:
  model_provider: google_vertexai
  model: gemini-2.5-flash
  api_key: ${GOOGLE_API_KEY}
  temperature: 0.7

# Agent Categories
agents:

  core:
    orchestrator_agent:
      model:
        model_provider: google_vertexai
        model: gemini-2.5-flash
        api_key: ${GOOGLE_API_KEY}
        temperature: 0.7
      prompt: |
        As an AI architect, design a multi-agent DAG workflow for an image task. The workflow must include a final `multi-stage` planning agent, use `planner` as the last planner agent's name.

        **GENERAL RULES**
        {rules_to_be_loaded}`

        **DESIGN PRINCIPLES**
        1.  **Data Flow:** Link agents by using `{{dependency_name_output}}` placeholders in prompts to pass data.

        2.  **Planner Agent Construction:** The final agent in the graph is a planner. You MUST construct its prompt to include these instructions:
            *   State the initially available image tags: `{image_tags}`.
            *   Enforce a strict JSON output conforming to the `StyleTransferPlan` schema. A single stage looks like this: `{{"stage_name": "...", "generated_image_tag": "...", "required_image_tags": ["..."], "text_prompt": "..."}}`.

        4. **Include Concise Rules**: Include specific content from the (`GENERAL RULES`) to each agent according to their functions.

        3.  **Conciseness:** All generated prompts and agent outputs MUST be concise.

        For each agent, define:
        - `agent_name`: Unique name.
        - `dependencies`: List of agent names it depends on.
        - `prompt`: A **concise** prompt instructing the agent to output JSON. To use a dependency's output, include the placeholder `{{dependency_name}}_output`.
        - `required_image_tags`: List of image tags needed.

        After designing the graph, also create a concise `result_critique_criteria` for critiquing the task result.

        User's request: {user_prompt}
        Available image tags (in order of appearance): {image_tags}

    # AI CREATED AGENTS, combined to give messages to plan agent.
    function_agents:
      model:
        model_provider: google_vertexai
        model: gemini-2.5-flash
        api_key: ${GOOGLE_API_KEY}
        temperature: 0.7 # This can be overridden by individual agent configs
      # This section will be dynamically populated by the orchestrator_agent
      agents: []

    plan_agent:
      # This agent is now dynamically generated by the orchestrator.
      # The orchestrator will create a final agent in the graph whose prompt
      # instructs it to output a JSON conforming to the StyleTransferPlan schema.
      model:
        model_provider: google_vertexai
        model: gemini-2.5-flash
        api_key: ${GOOGLE_API_KEY}
        temperature: 0.7

    reflect_agent:
      model:
        model_provider: google_vertexai
        model: gemini-2.5-flash
        api_key: ${GOOGLE_API_KEY}
        temperature: 0.7
      # This prompt will be dynamically generated by the orchestrator_agent
      prompt: |
        {AI_FILLED_CRITIQUE_CRITERIA_AND_SCORES}

        Provide a critique, scores_dict, and `is_satisfied` flag.

    stage_agent:
      model:
        model_provider: google_vertexai
        model: gemini-2.5-flash
        api_key: ${GOOGLE_API_KEY}
        temperature: 0.7
      prompt: |
        You are a stage finetuner. Based on a critique, create a *single* new stage to improve the generated image.
        Address the flaws mentioned. Create a concise, command-like `text_prompt` and specify the `required_image_tags` with the **Most suitable** image tags from the `{image_tags}`(may well <=2).